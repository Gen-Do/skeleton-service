# Универсальный GitHub Actions пайплайн для деплоя Go-сервисов через gendo-deployer
# Версия v0.4.0+ с автоматическим извлечением org и service из app.yaml
# Больше не требует передачи --org и --service флагов в gendo-deployer команды

name: Deploy Service

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main      # Деплой в production (будет преобразовано в prod)
      - staging   # Деплой в staging
    tags:
      - 'v*.*.*'  # Деплой тегов в production (будет преобразовано в prod)
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production  # Будет преобразовано в prod для gendo-deployer

jobs:
  # Парсинг app.yaml для получения базовой информации
  parse-config:
    runs-on: ubuntu-latest
    outputs:
      service-name: ${{ steps.app-yaml.outputs.SERVICE_NAME }}
      organization: ${{ steps.app-yaml.outputs.ORGANIZATION }}
      target-env: ${{ steps.app-yaml.outputs.TARGET_ENV }}
      github-env: ${{ steps.app-yaml.outputs.GITHUB_ENV }}  # Для GitHub Environments
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache yq
        id: cache-yq
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/yq
          key: yq-${{ runner.os }}-latest
          
      - name: Install yq
        if: steps.cache-yq.outputs.cache-hit != 'true'
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Parse app.yaml
        id: app-yaml
        run: |
          # Извлекаем переменные из app.yaml для отображения в логах и summary
          # gendo-deployer теперь извлекает их автоматически, но мы оставляем для информации
          SERVICE_NAME=$(yq eval '.service // .name' app.yaml)
          ORGANIZATION=$(yq eval '.organization // .owner' app.yaml)
          
          echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_OUTPUT
          echo "ORGANIZATION=${ORGANIZATION}" >> $GITHUB_OUTPUT
          
          # Определяем окружение для GitHub Actions
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            GITHUB_ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            GITHUB_ENV="production"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            GITHUB_ENV="staging"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            GITHUB_ENV="production"
          else
            GITHUB_ENV="staging"
          fi
          
          # Преобразуем для gendo-deployer (production -> prod)
          if [ "${GITHUB_ENV}" = "production" ]; then
            TARGET_ENV="prod"
          else
            TARGET_ENV="${GITHUB_ENV}"
          fi
          
          echo "GITHUB_ENV=${GITHUB_ENV}" >> $GITHUB_OUTPUT
          echo "TARGET_ENV=${TARGET_ENV}" >> $GITHUB_OUTPUT
          
          # Выводим переменные для отладки
          echo "Parsed configuration:"
          echo "  SERVICE_NAME: ${SERVICE_NAME}"
          echo "  ORGANIZATION: ${ORGANIZATION}"
          echo "  GITHUB_ENV: ${GITHUB_ENV} (for GitHub Environments)"
          echo "  TARGET_ENV: ${TARGET_ENV} (for gendo-deployer)"

  # Тестирование Go приложения
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'
          cache: true
          cache-dependency-path: go.sum
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          
      - name: Download dependencies
        run: go mod download
        
      - name: Run tests
        run: |
          echo "Running unit tests with parallel execution..."
          go test -v -parallel 4 ./...
          
          echo "Running race condition tests..."
          go test -race -parallel 2 ./...

  # Сборка и публикация Docker образа
  build-push:
    needs: [parse-config, test]
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image.outputs.IMAGE_NAME }}
      image-tag: ${{ steps.image.outputs.IMAGE_TAG }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        
      - name: Set image name and tag
        id: image
        run: |
          # Формируем имя образа в нижнем регистре
          IMAGE_NAME="ghcr.io/${{ github.repository }}"
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          
          # Формируем тег в том же формате, что и metadata-action
          if [[ "${{ github.ref }}" == "refs/heads/"* ]]; then
            BRANCH_NAME="${{ github.ref_name }}"
            IMAGE_TAG="${BRANCH_NAME}-$(echo "${{ github.sha }}" | cut -c1-7)"
          else
            IMAGE_TAG="${{ github.sha }}"
          fi
          
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ needs.parse-config.outputs.service-name }}
            org.opencontainers.image.description=GenDO service
            org.opencontainers.image.vendor=${{ needs.parse-config.outputs.organization }}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Деплой в выбранное окружение
  deploy:
    needs: [parse-config, build-push]
    runs-on: [self-hosted, TARGET_ORG_NAME]
    environment: ${{ needs.parse-config.outputs.github-env }}  # Используем GitHub Environment
    
    env:
      SERVICE_NAME: ${{ needs.parse-config.outputs.service-name }}
      ORGANIZATION: ${{ needs.parse-config.outputs.organization }}
      TARGET_ENV: ${{ needs.parse-config.outputs.target-env }}  # prod/staging для gendo-deployer
      IMAGE_NAME: ${{ needs.build-push.outputs.image-name }}
      IMAGE_TAG: ${{ needs.build-push.outputs.image-tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        
      - name: Prepare gendo-deployer
        run: |
          echo "Preparing gendo-deployer and checking dependencies..."
          gendo-deployer prepare
          
      - name: Login to GitHub Container Registry
        run: |
          echo "Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
      - name: Verify Docker image access
        run: |
          FULL_IMAGE="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          
          echo "Verifying access to Docker image: $FULL_IMAGE"
          
          # Пробуем получить информацию об образе
          if docker manifest inspect "$FULL_IMAGE" >/dev/null 2>&1; then
            echo "✅ Docker image is accessible: $FULL_IMAGE"
          else
            echo "❌ Cannot access Docker image: $FULL_IMAGE"
            echo "This may cause deployment to fail. Please check:"
            echo "1. Image exists in GitHub Container Registry"
            echo "2. Image is published correctly"
            echo "3. GitHub token has proper permissions"
            # Не завершаем с ошибкой, просто предупреждаем
          fi
          
      - name: Deploy service
        run: |
          FULL_IMAGE="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          
          echo "Deploying service ${{ env.SERVICE_NAME }} to ${{ env.TARGET_ENV }}"
          echo "Organization: ${{ env.ORGANIZATION }}"
          echo "Image: ${FULL_IMAGE}"
          echo "App YAML: ./app.yaml"
          
          # ✅ УПРОЩЕНО: org и service теперь извлекаются автоматически из app.yaml
          echo "Running gendo-deployer deploy command..."
          
          # Экспортируем IMAGE_TAG для использования в compose шаблонах
          export IMAGE_TAG="${FULL_IMAGE}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          
          gendo-deployer deploy \
            --env "${{ env.TARGET_ENV }}" \
            --image "${FULL_IMAGE}" \
            --app-yaml "./app.yaml" \
            --verbose
          
          DEPLOY_EXIT_CODE=$?
          echo "Deploy command completed with exit code: $DEPLOY_EXIT_CODE"
          
          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "❌ Deploy failed with exit code $DEPLOY_EXIT_CODE"
            exit $DEPLOY_EXIT_CODE
          else
            echo "✅ Deploy succeeded"
          fi
            
      - name: Wait for deployment
        run: |
          echo "Waiting 30 seconds for deployment to stabilize..."
          sleep 30
            
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          echo "Checking status for:"
          echo "  Organization: ${{ env.ORGANIZATION }}"
          echo "  Environment: ${{ env.TARGET_ENV }}"
          echo "  Service: ${{ env.SERVICE_NAME }}"
          
          # Сначала проверим все сервисы в окружении
          echo "Checking all services in environment:"
          gendo-deployer status \
            --env "${{ env.TARGET_ENV }}" \
            --app-yaml "./app.yaml" \
            --verbose || echo "Failed to get environment status"
          
          echo ""
          echo "Now checking specific service (extracted from app.yaml):"
          # Проверим конкретный сервис (он будет извлечен автоматически)
          gendo-deployer status \
            --env "${{ env.TARGET_ENV }}" \
            --app-yaml "./app.yaml" \
            --verbose || echo "Service not found, but deployment may still be in progress"
            
          echo "Deployment verification completed"

  # Уведомления о результате деплоя
  notify:
    needs: [parse-config, build-push, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine deployment result
        id: result
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment successful" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment failed" >> $GITHUB_OUTPUT
          fi
          
      - name: Summary
        run: |
          FULL_IMAGE="${{ needs.build-push.outputs.image-name }}:${{ needs.build-push.outputs.image-tag }}"
          
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ needs.parse-config.outputs.service-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Organization**: ${{ needs.parse-config.outputs.organization }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.parse-config.outputs.target-env }} (gendo-deployer)" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Environment**: ${{ needs.parse-config.outputs.github-env }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${FULL_IMAGE}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.result.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
