// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"net/http"

	"github.com/go-chi/chi/v5"
)

// Interface of the server is described in the handler.go file

// Middleware of the server is described in the handler.go file

var _ ServerInterface = (*Server)(nil)

type Server struct {
	handlers map[endpoint]any
	router   chi.Router
}

func NewServer() *Server {
	return &Server{
		handlers: make(map[endpoint]any),
	}
}

func (s *Server) GetMux() chi.Router {
	return s.router
}

type endpoint string

const (
	endpointGetExample endpoint = "GetExample"
)

// (GET /example)
func (s *Server) SetGetExampleHandler(fn func(w http.ResponseWriter, r *http.Request, params GetExampleParams)) {
	s.handlers[endpointGetExample] = fn
}

// (GET /example)
func (s *Server) GetExample(w http.ResponseWriter, r *http.Request, params GetExampleParams) {
	fn, ok := s.handlers[endpointGetExample]
	if !ok {
		w.WriteHeader(http.StatusNotImplemented)
		return
	}
	typedFn, ok := fn.(func(w http.ResponseWriter, r *http.Request, params GetExampleParams))
	if !ok {
		w.WriteHeader(http.StatusNotImplemented)
		return
	}
	typedFn(w, r, params)
}

type ServerOption func(o *ChiServerOptions)

func WithErrorHandlerFunc(fn func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(o *ChiServerOptions) {
		o.ErrorHandlerFunc = fn
	}
}

func WithMW(mw func(http.Handler) http.Handler) ServerOption {
	return func(o *ChiServerOptions) {
		o.Middlewares = append(o.Middlewares, mw)
	}
}

func WithBaseURL(baseURL string) ServerOption {
	return func(o *ChiServerOptions) {
		o.BaseURL = baseURL
	}
}

func WithBaseRouter(baseRouter chi.Router) ServerOption {
	return func(o *ChiServerOptions) {
		o.BaseRouter = baseRouter
	}
}

func CreateHandler(opts ...ServerOption) *Server {
	srv := NewServer()
	options := ChiServerOptions{}
	for _, opt := range opts {
		opt(&options)
	}
	srv.router = options.BaseRouter
	if srv.router == nil {
		srv.router = chi.NewRouter()
	}

	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            srv,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}
	srv.router.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/example", wrapper.GetExample)
	})

	return srv
}
