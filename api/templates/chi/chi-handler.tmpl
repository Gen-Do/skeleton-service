var _ ServerInterface = (*Server)(nil)

type Server struct {
    handlers map[endpoint]any
    router chi.Router
}

func NewServer() *Server {
    return &Server{
        handlers: make(map[endpoint]any),
    }
}

func (s *Server) GetMux() chi.Router {
    return s.router
}

type endpoint string
const (
    {{range .}}
    endpoint{{.OperationId}} endpoint = "{{.OperationId}}"
    {{end}}
)

{{range .}}{{.SummaryAsComment }}
// ({{.Method}} {{.Path}})
func (s *Server) Set{{.OperationId}}Handler(fn func(w http.ResponseWriter, r *http.Request{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}})) {
    s.handlers[endpoint{{.OperationId}}] = fn
}
{{end}}

{{range .}}{{.SummaryAsComment }}
// ({{.Method}} {{.Path}})
func (s *Server) {{.OperationId}}(w http.ResponseWriter, r *http.Request{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) {
    fn, ok := s.handlers[endpoint{{.OperationId}}]
    if !ok {
        w.WriteHeader(http.StatusNotImplemented)
        return
    }
    typedFn, ok := fn.(func(w http.ResponseWriter, r *http.Request{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}))
    if !ok {
        w.WriteHeader(http.StatusNotImplemented)
        return
    }
    typedFn(w, r{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params{{end}})
}
{{end}}

type ServerOption func(o *ChiServerOptions)

func WithErrorHandlerFunc(fn func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(o *ChiServerOptions) {
		o.ErrorHandlerFunc = fn
	}
}

func WithMW(mw func(http.Handler) http.Handler) ServerOption {
	return func(o *ChiServerOptions) {
		o.Middlewares = append(o.Middlewares, mw)
	}
}

func WithBaseURL(baseURL string) ServerOption {
	return func(o *ChiServerOptions) {
		o.BaseURL = baseURL
	}
}

func WithBaseRouter(baseRouter chi.Router) ServerOption {
	return func(o *ChiServerOptions) {
		o.BaseRouter = baseRouter
	}
}

func CreateHandler(opts ...ServerOption) *Server {
    srv := NewServer()
	options := ChiServerOptions{}
	for _, opt := range opts {
		opt(&options)
	}
	srv.router = options.BaseRouter
	if srv.router == nil {
		srv.router = chi.NewRouter()
	}

    if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            srv,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}
    {{range .}}srv.router.Group(func(r chi.Router) {
    r.{{.Method | lower | title }}(options.BaseURL+"{{.Path | swaggerUriToChiUri}}", wrapper.{{.OperationId}})
    })
    {{end}}
    return srv 
}
